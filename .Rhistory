?nchar
library(XML)
library(httr)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
html <- readLines(con)
close(con)
answer <- c(nchar(html[10]), nchar(html[20]), nchar(html[30]), nchar(html[100]))
answer
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(url, destfile = "data.for", method = "auto")
data <- read.fwf(data.for)
?read.fwf
lines <- readLines(url, n=10)
widths <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler",
"sstaNino12", "filler", "sstNino3", "filler", "sstaNino3",
"filler", "sstNino34", "filler", "sstaNino34", "filler",
"sstNino4", "filler", "sstaNino4")
data <- read.fwf(data.for, widths = widths, header = FALSE, skip = 4, col.names = colNames)
data <- read.fwf(url, widths = widths, header = FALSE, skip = 4, col.names = colNames)
data <- read.fwf("data.for", widths = widths, header = FALSE, skip = 4, col.names = colNames)
View(data)
answer <- sum(data[,4])
answer
View(data)
data <- read.fwf("data.for", widths = widths, header = FALSE, col.names = colNames)
View(data)
data <- read.fwf("data.for", widths = widths, header = FALSE, skip = 4, col.names = colNames)
?grep
d <- d[, grep("^[^filler]", names(d))]
d <- d[, grep("^[^filler]", names(data))]
data <- data[, grep("^[^filler]", names(data))]
sum(d[, 4])
sum(data[, 4])
View(data)
answer <- sum(data[,4])
answer
86.83*3
[0-9]+ (.*)[0-9]+
## Working with dates
d1 = date()
d1
class(d1)
s2 = Sys.Date()
class(d2)
d2 = Sys.Date()
class(d2)
format(d2, "%a" "%b" %c"")
format(d2, "%a "%b %c")
format(d2, "%a "%b %d")
format(d2, "%a "%b %d")
format(d2, "%a "%b %y")
format(d2, "%a "%b %y")
format(d2, "%a "%b %y")
x=c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z= as.Date(x, "%d%b%Y")
z
z[1]-z[2]
as.numeric(z[1-z[4]])
as.numeric(z[1]-z[4]])
as.numeric(z[1]-z[2]])
as.numeric(z[1]-z[2])
as.numeric(z[1]-z[4])
weedays(d2)
weekdays(d2)
months(d2)
julian(d2)
install.packages("lubridate")
library(lubridate)
ymd("20140108")
mdy("08/08/2015")
dmy("14/08/1988")
ymd_hms("14/08/1988 10:15:33")
ymd_hms("14-08-1988 10:15:33")
ymd_hms("2014-08-19 10:15:33")
ymd_hms("2014-08-19 10:15:33", tz = "Pacific/Auckland")
x=dmy(c("1jan1960", "2jan1960", "31mar1960", "30jul1960"))
wday(x[1])
wday(x[1], label = TRUE)
library(dplyr)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
if(file.exists("./data")){dir.create("./data")}
download.file(fileUrl, destfile = ".data/idaho_survey.csv", method = "auto")
download.file(fileUrl, destfile = ".idaho_survey.csv", method = "auto")
library(data.table)
getwd()
dataIdaho <- data.table(read.csv("idaho_survey.csv", stringsAsFactors = FALSE)
dataIdaho <- data.table(read.csv("idaho_survey.csv", stringsAsFactors = FALSE))
View(dataIdaho)
?strsplit
names(dataIdaho)
names <- names(dataIdaho)
strsplit(names, "wgtp")
strsplit(names, wgtp)
splittedData <- strsplit(names, "wgtp")
splittedData[123]
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl2, destfile = "GDP.csv", method = "auto")
dataGDP <- data.table(read.csv("GDP.csv", stringsAsFactors = FALSE))
View(dataGDP)
dataGDP <- data.table(read.csv("GDP.csv", skip = 4, stringsAsFactors = FALSE))
select(dataGDP, c("X", "X1", "X3", "X4"))
select(dataGDP, c(1, 2, 4, 5))
dataGDP <- select(dataGDP, c(1, 2, 4, 5))
?colnames
colnames(dataGDP) <- c("CountryCode", "RankGDP", "Country", "GDP")
names(dataGDP)
dataGDP$numGDP <- as.numeric(gsub(",","",dataGDP$GDP))
dataGDP <- data.table(read.csv("GDP.csv", skip = 4, nrows = 190, stringsAsFactors = FALSE))
dataGDP <- select(dataGDP, c(1, 2, 4, 5))
colnames(dataGDP) <- c("CountryCode", "RankGDP", "Country", "GDP")
names(dataGDP)
dataGDP$numGDP <- as.numeric(gsub(",","",dataGDP$GDP))
average <- mean(dataGDP$numGDP)
average
?grep
grep("United$",Country), 3
grep("United$",Country)
grep("United$", dataGDP$Country)
grep("*United$", dataGDP$Country)
grep("^United",dataGDP$Country)
grep("^United",dataGDP$Country)
length(grep("United$", dataGDP$Country))
length(grep("*United$", dataGDP$Country))
length(grep("^United",dataGDP$Country))
length(grep("^United",dataGDP$Country))
fileUrl3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl3, destfile = "GDP_2.csv", method = "auto")
fileUrl4 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl4, destfile = "Educ.csv", method = "auto")
fileUrl3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl3, destfile = "GDP_2.csv", method = "auto")
fileUrl4 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl4, destfile = "Educ.csv", method = "auto")
dataGDP2 <- data.table(read.csv("GDP.csv", skip = 4, nrows = 190, stringsAsFactors = FALSE))
dataGDP2 <- select(dataGDP2, c(1, 2, 4, 5))
colnames(dataGDP2) <- c("CountryCode", "RankGDP", "Country", "GDP")
names(dataGDP2)
dataEduc <- data.table(read.csv("Educ.csv", stringsAsFactors = FALSE))
View(dataEduc)
View(dataGDP)
View(dataEduc)
View(dataGDP2)
View(dataEduc)
?merge
dataEduc <- dataEduc[,c("CountryCode", "Special.Notes")]
fullData <- merge(dataGDP2,dataEduc, by.x = CountryCode, by.y = CountryCode)
fullData <- merge(dataGDP2,dataEduc, by.x = "CountryCode", by.y = "CountryCode")
View(fullData)
mergedData <- merge(dataGDP2,dataEduc, by.x = "CountryCode", by.y = "CountryCode")
?grep
?grpl
?grepl
length(grep("[Ff]iscal year end(*/)+ June" ), mergedData$Special.Notes)
length(grep("[Ff]iscal year end(*/)+ June", mergedData$Special.Notes))
length(grep("[Ff]iscal year (*/)+June", mergedData$Special.Notes))
length(grep("^[Ff]iscal year (*/)+June", mergedData$Special.Notes))
length(grep("^[Ff]iscal year end: (*/)+June", mergedData$Special.Notes))
length(grep("^[Ff]iscal year end:(*/)+June", mergedData$Special.Notes))
length(grepl("^[Ff]iscal year end:(*/)+June", mergedData$Special.Notes))
View(mergedData)
mergedData$Special.Notes[grepl("^Fiscal year end: June 30", mergedData$Special.Notes)]
length(grep("^Fiscal year end: June 30", mergedData$Special.Notes))
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes <- data.table(sampleTimes)
View(sampleTimes)
?POSIXlt
?grep
sampleTimes12 <- grep("^2012", sampleTimes)
sampleTimes12 <- sampleTimes[grep("^2012", sampleTimes)]
View(sampleTimes12)
?wday
sapply(sampleTimes12, wday)
sampleTimes12Mon <- sapply(sampleTimes12, wday)
sampleTimes12Mon <- data.table(sapply(sampleTimes12, wday))
View(sampleTimes12Mon)
sampleTimes12Mon <- data.table(sapply(sampleTimes12, wday(..., label = TRUE)))
sampleTimes12Mon <- data.table(sapply(sampleTimes12, wday(... , label = TRUE)))
sampleTimes12Mon <- data.table(sapply(sampleTimes12, wday(label = TRUE)))
sampleTimes12Mon <- data.table(sapply(sampleTimes12, wday))
wday(sampleTimes12Mon, label = TRUE)
sampleTimes12Mon <- data.table(sapply(sampleTimes12, weekdays))
View(sampleTimes12Mon)
?n
MOndays <- length(sampleTimes12Mon[grepl("segunda-feira", sampleTimes12Mon)])
MOndays
length(sampleTimes12Mon[grepl("segunda-feira", sampleTimes12Mon$sampleTimes)])
length(sampleTimes12Mon[grep("segunda-feira", sampleTimes12Mon$sampleTimes)])
length(sampleTimes12Mon(grep("segunda-feira", sampleTimes12Mon$sampleTimes)))
sampleTimes12Mon(grep("segunda-feira", sampleTimes12Mon$sampleTimes))
length(which(wday(sampleTimes12Mon, label = T) == "segunda-feira"))
length(which(sampleTimes12Mon$sampleTimes == "segunda-feira"))
Mondays <- length(which(sampleTimes12Mon$sampleTimes == "segunda-feira"))
Mondays
36.92/6
library(ggplot2)
testdat <- data.frame(x = 1:100, y = rnorm(100))
plot(testdat$x, testdat$y, type = 'l', ylim = c(-3,3))
testdat[50,2] <- 100
plot(testdat$x, testdat$y, type = 'l', ylim = c(-3,3))
library(ggplot2)
g <- ggplot(testdat, aes(x = x, y = y))
g + geom_line()
g + geom_line + ylim(-3,3)
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(3,-3))
set.seed(12345)
par(mar = rep (0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[,nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
set.seed(678910)
set.seed(678910)
for (i in 1:40){
#flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if a coin is heads add a common pattern to the row
if (coinFlip){
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0, 3), each = 5)
}
}
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
image(1:10, 1:40, t(dataMatrix)[,nrow(dataMatrix):1])
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order,]
par(mfrow = c(1,3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
setwd("C:/Users/Marcelo/Desktop/Data/Ice Cream Sales/")
library(ggplot2)
library(lubridate)
library(scales)
library(dplyr)
library(readr)
library(plyr)
library(data.table)
data <- data.table(read.csv("data.txt", sep = "\t", header = TRUE))
cnames <- readLines("data.txt", 1)
cnames <- strsplit(cnames,"\t", fixed = TRUE)
cnames
names(data) <- make.names(cnames[[1]])
head(data)
data$Date = as.Date(as.character(data$Date))
str(data)
ggplot(data = data, aes(x = Date, y = Ice.Cream.Sales))+
geom_point()
data <- data.table(read.csv("data.txt", sep = "\t", header = TRUE))
names(data) <- c("Date", "Temp", "Sales")
head(data)
data$Date = format(as.Date(data$Date), "%Y/%m/%d")
data <- data.table(read.csv("data.txt", sep = "\t", header = TRUE))
names(data) <- c("Date", "Temp", "Sales")
head(data)
data$Date = format(as.Date(data$Date), "%d/%m/%Y")
data <- data.table(read.csv("data.txt", sep = "\t", header = TRUE))
data$newDate <- strptime(as.character(X$date), "%d/%m/%Y")
data$newDate <- strptime(as.character(data$Date), "%d/%m/%Y")
data$newDate <- strptime(as.character(data$Date), "%d/%m/%Y")
names(data) <- make.names(c("Date", "Temp", "Sales"))
data <- data.table(read.csv("data.txt", sep = "\t", header = TRUE))
names(data) <- make.names(c("Date", "Temp", "Sales"))
head(data)
data <- data.table(read.csv("data.txt", nrow = 28, sep = "\t", header = TRUE))
names(data) <- make.names(c("Date", "Temp", "Sales"))
head(data)
data$newDate <- strptime(as.character(data$Date), "%d/%m/%Y")
data$newDate <- as.Date(parse_date_time(data$Date), "dmy")
data$newDate <-NULL
data$newDate <- as.Date(parse_date_time(data$Date), "dmy")
data$Date <- format(as.Date(data$Date, format = "%d/%m/%Y"), "%Y-%m-%d")
str(data)
ggplot(data = data, aes(x = Date, y = Ice.Cream.Sales))+
geom_point()
ggplot(data = data, aes(x = Date, y = Sales))+
geom_point()
ggplot(data = data, aes(x = Date, y = Sales, colour = Temp))+
geom_point()
plot(date$Date, date$Sales)
plot(data$Date, data$Sales)
ggplot(data = data, aes(x = Date, y = Sales, colour = Temp))+
geom_point()
ggplot(data = data, aes(x = Date, y = Sales, colour = Temp))+
geom_point()+
geom_smooth
ggplot(data = data, aes(x = Date, y = Sales, colour = Temp))+
geom_point()+
geom_smooth()
?xlab
?ggplot
?geom_smooth
ggplot(data = data, aes(x = Date, y = Sales, colour = Temp))+
geom_point()+
ggtitle("Ice Cream Sales per day")+
geom_smooth(method = "lm", se = FALSE)+
theme(plot.title=element_text(size=15))
ggplot(data = data, aes(x = Date, y = Sales, colour = Temp))+
geom_point()+
ggtitle("Ice Cream Sales per day")+
geom_smooth(method = "lm", formula = y ~ x, se = FALSE)+
theme(plot.title=element_text(size=15))
ggplot(data = data, aes(x = Date, y = Sales, colour = Temp))+
geom_point()+
ggtitle("Ice Cream Sales per day")+
geom_smooth(data = data, method = "lm", formula = data$Sales ~ data$Temp, se = FALSE)+
theme(plot.title=element_text(size=15))
ggplot(data = data, aes(x = Date, y = Sales, colour = Temp))+
geom_point()+
ggtitle("Ice Cream Sales per day")+
theme(plot.title=element_text(size=15))+
scale_x_date(date_labels = "%b %d")
ggplot(data = data, aes(x = Date, y = Sales, colour = Temp))+
geom_point()+
ggtitle("Ice Cream Sales per day")+
theme(plot.title=element_text(size=15))+
scale_x_date(date_breaks = "1 week")
class(data$Date)
as.Date(data$Date, "%Y-%m-%d")
data$NewDate <- as.Date(data$Date, "%Y-%m-%d")
ggplot(data = data, aes(x = NewDate, y = Sales, colour = Temp))+
geom_point()+
ggtitle("Ice Cream Sales per day")+
theme(plot.title=element_text(size=15))+
scale_x_date(date_breaks = "1 week")
ggplot(data = data, aes(x = NewDate, y = Sales, colour = Temp))+
geom_point()+
geom_smooth()+
ggtitle("Ice Cream Sales per day")+
ylab("Date")
ggplot(data = data, aes(x = NewDate, y = Sales, colour = Temp))+
geom_point()+
geom_smooth()+
ggtitle("Ice Cream Sales per day")+
ylab("Sales")+
xlab("Date")
ggplot(data = data, aes(x = NewDate, y = Sales, colour = Temp))+
geom_point()+
geom_smooth()+
ggtitle("Ice Cream Sales per day")+
ylab("Sales")+
xlab("Date")+
theme(plot.title=element_text(size=15))+
scale_x_date(date_breaks = "1 week")
ggplot(data = data, aes(x = NewDate, y = Sales, colour = Temp))+
geom_point()+
geom_smooth()+
ggtitle("Ice Cream Sales per day")+
ylab("Sales")+
xlab("Date")+
theme(plot.title=element_text(size=15))
ggplot(data = data, aes(x = Temp, y = Sales, colour = Dates))+
geom_point()+
geom_smooth()+
ggtitle("Ice Cream Sales per day")+
ylab("Sales")+
xlab("Date")+
theme(plot.title=element_text(size=15))
ggplot(data = data, aes(x = Temp, y = Sales, colour = NewDate))+
geom_point()+
geom_smooth()+
ggtitle("Ice Cream Sales per day")+
ylab("Sales")+
xlab("Date")+
theme(plot.title=element_text(size=15))
ggplot(data = data, aes(x = Temp, y = Sales))+
geom_point()+
geom_smooth()+
ggtitle("Ice Cream Sales as a function of Temperature")+
ylab("Sales / U$")+
xlab("Temperature / ºF")+
theme(plot.title=element_text(size=15))
data$NewDate <- wday(ymd(data$NewDate), label = TRUE)
data$NewDate <- wday(ymd_hms(data$NewDate), label = TRUE)
data$NewDate <- wday(ymd_hms(data$NewDate))
data$NewDate <- as.Date(data$Date, "%Y-%m-%d")
data$NewDate <- wday(ymd_hms(data$NewDate))
data$NewDate <- as.Date(data$Date, "%Y-%m-%d")
data$NewDate <- wday(as.Date(data$Date, "%Y-%m-%d"), label = TRUE)
?wday
data$NewDate <- as.Date(data$Date, "%Y-%m-%d")
data$weekday <- wday((data$NewDate, "%Y-%m-%d"), label = TRUE)
data$weekday <- wday(ymd(data$NewDate), label = TRUE)
data$weekday <- wday(ymd(data$NewDate))
data_wdays <- ddply(data,.(weekday, Sales), summarise, count = mean(Sales))
View(data_wdays)
data_wdays <- ddply(data,.(weekday), summarise, count = mean(Sales))
?week
data$week <- week(ymd(data$NewDate))
data_wdays <- ddply(data,.(weekday, week), summarise, count = mean(Sales))
View(data_wdays)
data_wdays <- ddply(data,.(week), summarise, count = mean(Sales))
data_week <- ddply(data,.(week), summarise, count = mean(Sales))
data_wdays <- ddply(data,.(weekdays), summarise, count = mean(Sales))
data_wdays <- ddply(data,.(weekday), summarise, count = mean(Sales))
View(data_wdays)
View(data_week)
ggplot(data = data, aes(x = Temp, y = Sales, colour = weekday))
ggplot(data = data, aes(x = Temp, y = sales, colour = weekday))
ggplot(data = data, aes(x = Temp, y = Sales, colour = weekday))
data_wdays <- ddply(data,.(weekday, Temp), summarise, count = mean(Sales))
ggplot(data = data, aes(x = Temp, y = Sales, colour = weekday))
ggplot(data = data, aes(x = Temp, y = Sales, colour = weekday))+
geom_point(data = data_wdays, aes(group = weekday))+
ggtitle("Weekend effect in the Bike rent")+
theme(plot.title=element_text(size=15))
ggplot(data = data, aes(x = Temp, y = Sales, colour = weekday))+
geom_point(data = data_wdays, aes(group = weekday))+
ggplot(data = data, aes(x = Temp, y = Sales, colour = weekday))+
geom_point(data = data_wdays, aes(group = weekday))
ggplot(data = data, aes(x = Temp, y = Sales, colour = weekday))+
geom_point()
data_wdays <- ddply(data,.(weekday), summarise, count = mean(Sales))
ggplot(data = data, aes(x = weekday, y = count))+
geom_point()
ggplot(data = data_wdays, aes(x = weekday, y = count))+
geom_point()
?geom_smooth
ggplot(data = data_wdays, aes(x = weekday, y = count))+
geom_point()+
geom_smooth(formula = y ~ sin(x))
ggplot(data = data_wdays, aes(x = weekday, y = count))+
geom_point()+
geom_smooth(formula = y ~ sin(x), se = FALSE)
ggplot(data = data_wdays, aes(x = weekday, y = count))+
geom_point()+
geom_smooth(formula = y ~ sin(x), se = FALSE)+
geom_smooth(formula = y ~ poly(x,3), se = FALSE, col = 'red')
ggplot(data = data_wdays, aes(x = weekday, y = count))+
geom_point()+
geom_smooth(formula = y ~ sin(x), se = FALSE)+
geom_smooth(formula = y ~ poly(x,4), se = FALSE, col = 'red')
ggplot(data = data_wdays, aes(x = weekday, y = count))+
geom_point()+
geom_smooth(formula = y ~ sin(x), se = FALSE)+
geom_smooth(formula = y ~ poly(x,5), se = FALSE, col = 'red')
ggplot(data = data_wdays, aes(x = weekday, y = count))+
geom_point()+
geom_smooth(formula = y ~ sin(x), se = FALSE)+ # Trying to fit a sin function
ggtitle("Average Ice Cream Sales per weekday")+
ylab("Sales / U$")+
xlab("Weekday")+
theme(plot.title=element_text(size=15))
ggplot(data = data_week, aes(x = week, y = count))+
geom_point()+
ggplot(data = data_week, aes(x = week, y = count))+
geom_point()
ggplot(data = data_week, aes(x = week, y = count))+
geom_point()
ggplot(data = data_week, aes(x = week, y = count))+
geom_point()
ggplot(data = data_week, aes(x = week, y = count))+
geom_point()
ggplot(data = data_week, aes(x = week, y = count))+
geom_point()+
geom_smooth(formula = y ~ sin(x), se = FALSE) # Trying to fit a sin function
ggplot(data = data_week, aes(x = week, y = count))+
geom_point()+
geom_smooth(formula = y ~ sin(x), se = TRUE) # Trying to fit a sin function
ggplot(data = data_week, aes(x = week, y = count))+
geom_point()+
geom_smooth(formula = y ~ sin(x), se = TRUE) # Trying to fit a sin function
ggplot(data = data_week, aes(x = week, y = count))+
geom_point()+
geom_smooth(formula = y ~ sin(x), se = TRUE)+ # Trying to fit a sin function
ggtitle("Average Ice Cream Sales per Week")+
ylab("Sales / U$")+
xlab("Week")+
theme(plot.title=element_text(size=15))
library(forecast)
?ts
t.ser <- ts(data$Sales, start=c(2019,10), freq=28)
t.ser <- ts(data$Sales, start=c(2019,10), freq=28)
t.ets <- ets(t.ser)
t.fc <- forecast(t.ets,h=1)
t.fc
t.ser <- ts(data$Sales, start = 1, end = 28, freq=1)
t.ser <- ts(data$Sales, start = 1, end = 28, freq = 1)
t.ets <- ets(t.ser)
t.fc <- forecast(t.ets,h=1)
t.fc
plot(t.fc, xaxt="n")
plot(t.fc)
plot(t.fc, xaxt="n")
a = seq(as.Date("2019-10-01"), by="weeks", length=4)
axis(1, at = decimal_date(a), labels = format(a, "%Y %b %d"), cex.axis=0.6)
abline(v = decimal_date(a), col='grey', lwd=0.5)
t.ser <- ts(data$Sales, start = 1, end = 28, freq = 1)
t.ets <- ets(t.ser)
t.fc <- forecast(t.ets,h=4)
t.fc
plot(t.fc, xaxt="n")
a = seq(as.Date("2019-10-01"), by = "weeks", length = 4)
axis(1, at = decimal_date(a), labels = format(a, "%Y %b %d"), cex.axis=0.6)
abline(v = decimal_date(a), col='grey', lwd=0.5)
ggplot(data = data, aes(x = NewDate, y = Sales))+
geom_point()
ggplot(data = data, aes(x = NewDate, y = Sales, colour = Temp))+
geom_point()
ggplot(data = data, aes(x = NewDate, y = Sales, colour = Temp))+
geom_point()+
geom_point(data = t.fc)
plot(t.fc, xaxt="n")
autoplot(t.fc)
autoplot(t.fc, ylab = "Days", xlab = "Sales")
autoplot(t.fc, ylab = "Days", xlab = "Sales",
main = "Ice Cream Sales Forecast Prediction")
